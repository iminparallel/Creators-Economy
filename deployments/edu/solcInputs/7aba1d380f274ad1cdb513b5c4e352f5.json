{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "contracts/CreatorEconomy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/automation/interfaces/AutomationCompatibleInterface.sol\";\n//import \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\n//import \"./PriceConverter.sol\";\n//import \"hardhat/console.sol\";\nerror Milestones__UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\n\n\ncontract CreatorEconomy is AutomationCompatibleInterface {\n   \n    enum MileStoneState {\n        OPEN,\n        CALCULATING\n    } \n\n    struct Product_identifiers {\n        address creator;\n        address[] fans;\n    }\n\n    struct Creator_balance {\n        address creator;\n        uint256 balance;\n        string[] identifier_list;\n    }\n\n    struct Milestone {\n        address creator;\n        uint256 totalMilestones;\n        uint256 totalAmount;\n        uint256 milestoneCompleted;\n        uint256 amountWithdrawn;\n        uint256 createdAt;\n        bool isCompleted;\n        uint256 endsAt;\n        string product;\n    }\n\n    mapping(string => Product_identifiers) private identifiers; \n    mapping(address => Creator_balance) private balances; \n    mapping(string => Milestone) private products;  \n\n    uint256 private constant MILESTONE_COUNT = 5;\n    uint256 private constant PLATFORM_PERCENTAGE = 10; \n    uint256 private constant CREATOR_PERCENTAGE = 50; \n    uint256 private owner_balance ;\n\n    address private platformWallet;\n    string[] private activeMilestones;\n    string[] private activeIdentifiers;\n\n    uint256 private immutable i_interval;\n    uint256 private s_lastTimeStamp;\n    uint256 private s_milestone_price;\n\n    event FundsLocked(address indexed user, uint256 amount);\n    event MilestoneCompleted(address indexed user, uint256 milestone, uint256 amountReleased);\n    event AllFundsWithdrawn(address indexed user, uint256 totalAmount);\n    event OwnersWithdrawl(address indexed creator, uint256 amount);\n    event PriceChange(uint256 amount);\n    event BalanceCreated(address creator);\n    event BalanceUpdated(address creator);\n    event ProductCreated(address creator, string product);\n    event CreatorsWithdrawl(address indexed creator, uint256 amount);\n\n    MileStoneState private s_milestoneState;\n\n    constructor(address _platformWallet, uint256 interval, uint256 price) {\n        require(_platformWallet != address(0), \"Invalid platform wallet\");\n        platformWallet = _platformWallet;\n        owner_balance = 0;\n        s_lastTimeStamp = block.timestamp;\n        i_interval = interval;\n        s_milestone_price = price;\n    }\n\n    modifier onlyOwner() {\n        require(platformWallet == msg.sender, \"Only the platform wallet can perform this action\");\n        _;\n    }\n\n    modifier onlyFans(string memory productId) {\n        require(products[productId].creator == msg.sender, \"Only the creator wallet can perform this action\");\n        _;\n    }\n\n    modifier whenOpen() {\n        require(s_milestoneState == MileStoneState.OPEN, \"Contract is in Upkeep\");\n        _;\n    }\n\n    function createProduct(string memory productId) external whenOpen() {\n        //console.log(\"product Id\", productId);\n        require(identifiers[productId].creator == address(0), \"Product Already Exists\");\n        activeIdentifiers.push(productId);\n\n        if (balances[msg.sender].creator == address(0)) {\n            // First time creator\n            balances[msg.sender].creator = msg.sender;\n            balances[msg.sender].balance = 0;\n            delete balances[msg.sender].identifier_list;\n            //console.log(\"product Id before pushing\", productId);\n            balances[msg.sender].identifier_list.push(productId);\n            emit BalanceCreated(msg.sender);\n        } else {\n            balances[msg.sender].identifier_list.push(productId);\n            emit BalanceUpdated(msg.sender);\n        }\n\n        address[] memory fansArray = new address[](0);\n        identifiers[productId] = Product_identifiers({\n            creator: msg.sender,\n            fans: fansArray\n        });\n\n        emit ProductCreated(msg.sender, productId);\n    }\n\n    function lockFunds(string memory productId, string memory identifier) external whenOpen() payable {\n        require(identifiers[identifier].creator != address(0), \"No articles exist\");\n        require(msg.value >= s_milestone_price, \"Sent amount must be higher than entry fee\");\n        require(products[productId].totalAmount == 0, \"User already locked funds\");\n\n        activeMilestones.push(productId);\n        uint256 fee = (msg.value * CREATOR_PERCENTAGE) / 100;\n        uint256 netAmount = msg.value - fee;\n        uint256 endsAt = block.timestamp + 3600*24*7;\n\n        \n        balances[msg.sender].balance += fee;\n        identifiers[identifier].fans.push(msg.sender);\n\n        products[productId] = Milestone({\n            creator: msg.sender,\n            totalMilestones: MILESTONE_COUNT, \n            totalAmount: netAmount,\n            milestoneCompleted: 0,\n            amountWithdrawn: 0,\n            createdAt: block.timestamp,\n            isCompleted: false,\n            endsAt: endsAt,\n            product: identifier\n        });\n\n        emit FundsLocked(msg.sender, netAmount);\n    }\n\n    function checkUpkeep(bytes memory)\n        public\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory  )\n    {\n        bool isOpen = MileStoneState.OPEN == s_milestoneState;\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        bool hasActiveMilestones = activeMilestones.length > 0;\n        bool hasBalance = address(this).balance > 0;\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasActiveMilestones);\n        return (upkeepNeeded, \"0x0\"); \n    }  \n\n    function performUpkeep(bytes calldata) external override {\n        (bool upkeepNeeded,) = checkUpkeep(\"\");\n         require(upkeepNeeded, \"Upkeep not needed\");\n        if (!upkeepNeeded) {\n            revert Milestones__UpkeepNotNeeded(address(this).balance, activeMilestones.length, uint256(s_milestoneState));\n        }\n        s_milestoneState = MileStoneState.CALCULATING;\n        string[] memory copiedActiveMilestone = activeMilestones;\n        uint256 temp_owner_balance = owner_balance;\n        uint256 j;\n        j = 0;\n        string[] memory updatedMileStones = new string[](copiedActiveMilestone.length); \n                \n        for (uint256 i = 0; i < copiedActiveMilestone.length; i++) {\n            string memory milestoneId = copiedActiveMilestone[i];\n            Milestone storage milestone = products[milestoneId];\n                    \n            if (milestone.endsAt > block.timestamp) {\n                updatedMileStones[j] = milestoneId;\n                j++;\n            } else {\n                temp_owner_balance += milestone.totalAmount - milestone.amountWithdrawn;\n            }\n        }\n        if (j < updatedMileStones.length) {\n            string[] memory resizedMileStones = new string[](j);\n            for (uint256 i = 0; i < j; i++) {\n                resizedMileStones[i] = updatedMileStones[i];\n            }\n            activeMilestones = resizedMileStones;\n        }\n        owner_balance = temp_owner_balance;\n        s_milestoneState = MileStoneState.OPEN;\n    }  \n\n    function completeMilestone(string memory productId) external whenOpen() onlyFans(productId){\n        Milestone storage product = products[productId];\n        require(product.totalAmount > 0, \"No funds locked\");\n        require(product.endsAt >= block.timestamp, \"Milestone Expired\");\n        require(product.milestoneCompleted < product.totalMilestones, \"All milestones already completed\");\n\n        uint256 milestoneAmount = product.totalAmount / product.totalMilestones;\n        product.milestoneCompleted++;\n\n        if (product.milestoneCompleted == product.totalMilestones) {\n            string[] memory copiedActiveMilestone = activeMilestones;\n            string[] memory updatedMileStones = new string[] (copiedActiveMilestone.length - 1);\n            uint256 j;\n            j = 0;\n            for (uint256 i = 0; i < copiedActiveMilestone.length; i++){\n                if (keccak256(abi.encodePacked(copiedActiveMilestone[i])) != keccak256(abi.encodePacked(productId))) {\n                    updatedMileStones[j] = copiedActiveMilestone[i];\n                    j+=1;\n                }\n            }\n            activeMilestones = updatedMileStones;\n\n            uint256 remainingAmount = product.totalAmount - product.amountWithdrawn;\n            product.amountWithdrawn += remainingAmount;\n            product.isCompleted = true;\n            payable(msg.sender).transfer(remainingAmount);\n            emit AllFundsWithdrawn(msg.sender, product.totalAmount);\n        } else {\n            product.amountWithdrawn += milestoneAmount;\n            payable(msg.sender).transfer(milestoneAmount);\n            emit MilestoneCompleted(msg.sender, product.milestoneCompleted, milestoneAmount);\n        }\n    }\n\n    function ownersWithdrawl( uint256 amount) external whenOpen() onlyOwner() {\n        require(amount <= owner_balance * 70 / 100, \"Amount exceeds collectable funds\");\n        payable(msg.sender).transfer(amount);\n        owner_balance -= amount;\n        emit OwnersWithdrawl(msg.sender, amount);\n    }\n\n    function creatorsWithdrawl( uint256 amount) external {\n        Creator_balance storage balance = balances[msg.sender];\n        require(amount <= balance.balance, \"Amount exceeds collecteables funds\");\n        require(msg.sender == balance.creator, \"Amount exceeds collected funds\");\n        payable(msg.sender).transfer(amount);\n        balance.balance -= amount;\n        balances[msg.sender] = balance;\n        emit CreatorsWithdrawl(msg.sender, amount);\n    }\n\n    function changeMileStonePrice( uint256 amount) external whenOpen() onlyOwner() {\n        s_milestone_price = amount;\n        emit PriceChange(amount);\n    }\n\n    function getUserMilestoneDetails(string memory productId) public view returns (Milestone memory) {\n        return products[productId];\n    }\n\n    function getCurrentTimestamp() public view returns (uint256) {\n        return block.timestamp;\n    }\n\n    function getOwnerBalance() public view onlyOwner() returns (uint256) {\n        return owner_balance;\n    }\n\n    function getIdentifiers() public view  returns (string[] memory) {\n        return activeIdentifiers;\n    }\n\n    function getIdentifier(string memory productId) public view  returns (Product_identifiers memory) {\n        return identifiers[productId];\n    }\n\n    function getBalance() public view  returns (Creator_balance memory) {\n        return balances[msg.sender];\n    }\n\n    function getPrice() public view returns (uint256) {\n        uint256 minimumUSD =  s_milestone_price; \n        return minimumUSD ;   \n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}